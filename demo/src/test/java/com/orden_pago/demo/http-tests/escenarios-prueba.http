### Pruebas con escenarios completos - Orden de Pago
### Puerto: 8084

### Login with Basic User
# @name loginUser
POST http://localhost:8081/auth/login
Content-Type: application/json

{
  "username": "testuser",
  "password": "password123"
}

###

# Variables de entorno
@baseUrl = http://localhost:8084
@authToken = Bearer {{loginUser.response.body.accessToken}}

#########################################################################
# ESCENARIO 1: COMPRA EXITOSA DE MÚLTIPLES SERVICIOS
#########################################################################

###
GET {{baseUrl}}/api/cart/items/mock/catalog
Content-Type: application/json
Authorization: {{authToken}}

### Prueba de seguridad
GET http://localhost:8084/api/user/data
Content-Type: application/json
Authorization: {{authToken}}

###

### Verificar la salud del servicio
GET {{ baseUrl }}/actuator/health
Content-Type: application/json

###

### Verificar carrito inicial
GET {{baseUrl}}/api/cart
Authorization: {{authToken}}
Content-Type: application/json

###

### Agregar primer servicio al carrito
POST {{ baseUrl }}/api/cart/items
Authorization: {{authToken}}
Content-Type: application/json

{
  "serviceId": "bd747bbd-289b-4702-8aa1-b739fb0ee736",
  "quantity": 2
}

###

### Agregar segundo servicio al carrito
POST {{ baseUrl }}/api/cart/items
Authorization: {{authToken}}
Content-Type: application/json

{
  "serviceId": "550e8400-e29b-41d4-a716-446655440002",
  "quantity": 1
}

###

### Verificar contenido del carrito
# @name cartForPayment1
GET {{baseUrl}}/api/cart
Authorization: {{authToken}}
Content-Type: application/json

###

### Procesar pago del carrito
POST {{baseUrl}}/api/payment/simulate
Authorization: {{authToken}}
Content-Type: application/json

{
  "cartId": "{{cartForPayment1.response.body.id}}",
  "method": "CREDIT_CARD",
  "cardNumber": "4532123456789012",
  "cardHolderName": "Test User",
  "expiryMonth": "12",
  "expiryYear": "2025",
  "cvv": "123"
}

###

### Verificar historial de pagos
GET {{baseUrl}}/api/payment/history
Authorization: {{authToken}}
Content-Type: application/json

###

#########################################################################
# ESCENARIO 2: MODIFICAR CARRITO SIN PAGO Y DESPUÉS ELIMINARLO
#########################################################################

### Crear nuevo carrito con items
POST {{baseUrl}}/api/cart/items
Authorization: {{authToken}}
Content-Type: application/json

{
  "serviceId": "550e8400-e29b-41d4-a716-446655440003",
  "quantity": 1
}

###

### Agregar más items
POST {{baseUrl}}/api/cart/items
Authorization: {{authToken}}
Content-Type: application/json

{
  "serviceId": "550e8400-e29b-41d4-a716-446655440004",
  "quantity": 2
}

###

### Verificar carrito actual
GET {{baseUrl}}/api/cart
Authorization: {{authToken}}
Content-Type: application/json

###

### Remover un item específico (NOTA: Reemplazar {itemId} con ID real)
DELETE {{baseUrl}}/api/cart/items/{itemId}
Authorization: {{authToken}}

###

### Verificar carrito después de remover item
GET {{baseUrl}}/api/cart
Authorization: {{authToken}}
Content-Type: application/json

###

### Abandonar carrito (vaciarlo completamente)
DELETE {{baseUrl}}/api/cart
Authorization: {{authToken}}

###

### Verificar carrito vacío
GET {{baseUrl}}/api/cart
Authorization: {{authToken}}
Content-Type: application/json

###

#########################################################################
# ESCENARIO 3: MÚLTIPLES INTENTOS DE PAGO
#########################################################################

### Crear carrito para pago
POST {{baseUrl}}/api/cart/items
Authorization: {{authToken}}
Content-Type: application/json

{
  "serviceId": "550e8400-e29b-41d4-a716-446655440005",
  "quantity": 1
}

###

### Verificar carrito antes del pago
# @name cartForPayment3
GET {{baseUrl}}/api/cart
Authorization: {{authToken}}
Content-Type: application/json

###

### Primer intento de pago - Tarjeta de Crédito
POST {{baseUrl}}/api/payment/simulate
Authorization: {{authToken}}
Content-Type: application/json

{
  "cartId": "{{cartForPayment3.response.body.id}}",
  "method": "CREDIT_CARD",
  "cardNumber": "4532123456789012",
  "cardHolderName": "Test User",
  "expiryMonth": "12",
  "expiryYear": "2025",
  "cvv": "123"
}

###

### Segundo intento de pago con PayPal (si el primero falló)
POST {{baseUrl}}/api/payment/simulate
Authorization: {{authToken}}
Content-Type: application/json

{
  "cartId": "{{cartForPayment3.response.body.id}}",
  "method": "PAYPAL",
  "cardNumber": "4532123456789012",
  "cardHolderName": "Test User",
  "expiryMonth": "12",
  "expiryYear": "2025",
  "cvv": "123"
}

###

### Tercer intento con transferencia bancaria
POST {{baseUrl}}/api/payment/simulate
Authorization: {{authToken}}
Content-Type: application/json

{
  "cartId": "{{cartForPayment3.response.body.id}}",
  "method": "BANK_TRANSFER",
  "cardNumber": "1234567890123456",
  "cardHolderName": "Test User",
  "expiryMonth": "12",
  "expiryYear": "2025",
  "cvv": "123"
}

###

### Verificar historial completo de pagos
GET {{baseUrl}}/api/payment/history
Authorization: {{authToken}}
Content-Type: application/json

###

#########################################################################
# ESCENARIO 4: PRUEBAS DE CONCURRENCIA (MÚLTIPLES CARRITOS)
#########################################################################

### Crear primer carrito
POST {{baseUrl}}/api/cart/items
Authorization: {{authToken}}
Content-Type: application/json

{
  "serviceId": "550e8400-e29b-41d4-a716-446655440006",
  "quantity": 1
}

###

### Verificar primer carrito
# @name firstConcurrentCart
GET {{baseUrl}}/api/cart
Authorization: {{authToken}}
Content-Type: application/json

###

### Completar primer carrito con pago
POST {{baseUrl}}/api/payment/simulate
Authorization: {{authToken}}
Content-Type: application/json

{
  "cartId": "{{firstConcurrentCart.response.body.id}}",
  "method": "CREDIT_CARD",
  "cardNumber": "4532123456789012",
  "cardHolderName": "Usuario Multitarea",
  "expiryMonth": "12",
  "expiryYear": "2025",
  "cvv": "123"
}

###

### Crear segundo carrito inmediatamente
POST {{baseUrl}}/api/cart/items
Authorization: {{authToken}}
Content-Type: application/json

{
  "serviceId": "550e8400-e29b-41d4-a716-446655440007",
  "quantity": 2
}

###

### Verificar que se creó un nuevo carrito activo
GET {{baseUrl}}/api/cart
Authorization: {{authToken}}
Content-Type: application/json

###

### Verificar historial de carritos
GET {{baseUrl}}/api/cart/history
Authorization: {{authToken}}
Content-Type: application/json

###

#########################################################################
# ESCENARIO 5: VALIDACIÓN DE SEGURIDAD
#########################################################################

### Intentar acceso sin token
GET {{baseUrl}}/api/cart
Content-Type: application/json

###

### Intentar agregar item con datos inválidos
POST {{baseUrl}}/api/cart/items
Authorization: {{authToken}}
Content-Type: application/json

{
  "serviceId": "550e8400-e29b-41d4-a716-446655440001",
  "quantity": -1
}

###

### Intentar pago con carrito inexistente
POST {{baseUrl}}/api/payment/simulate
Authorization: {{authToken}}
Content-Type: application/json

{
  "cartId": "00000000-0000-0000-0000-000000000000",
  "method": "CREDIT_CARD",
  "cardNumber": "4532123456789012",
  "cardHolderName": "Test User",
  "expiryMonth": "12",
  "expiryYear": "2025",
  "cvv": "123"
}

###

### Intentar modificar item que no existe
PUT {{baseUrl}}/api/cart/items/00000000-0000-0000-0000-000000000000
Authorization: {{authToken}}
Content-Type: application/json

{
  "quantity": 5
}