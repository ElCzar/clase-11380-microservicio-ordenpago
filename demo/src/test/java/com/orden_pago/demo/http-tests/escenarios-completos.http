### Pruebas con escenarios completos - Microservicio Orden de Pago
### Incluye: Autenticación, Carrito, Pago y Validaciones
### Puerto: 8084

# Variables de entorno
@baseUrl = http://localhost:8084
@perfilUrl = http://localhost:8081

#########################################################################
# AUTENTICACIÓN GLOBAL
#########################################################################

### Autenticación inicial
# @name globalLogin
POST {{perfilUrl}}/auth/login
Content-Type: application/json

{
  "username": "testuser",
  "password": "password123"
}

### Registrar usuario si no existe
# @name globalRegister
POST {{perfilUrl}}/auth/register/user
Content-Type: application/json

{
  "username": "testuser",
  "email": "testuser@example.com",
  "firstName": "Test",
  "lastName": "User",
  "password": "password123",
  "age": 25,
  "photo": "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==",
  "description": "Usuario para pruebas de escenarios"
}

@authToken = Bearer {{ globalLogin.response.body.accessToken }}

#########################################################################
# ESCENARIO 1: COMPRA EXITOSA DE MÚLTIPLES SERVICIOS
#########################################################################

### Verificar la salud del servicio
GET {{ baseUrl }}/actuator/health
Content-Type: application/json

###

### Verificar carrito inicial (debe estar vacío)
GET {{baseUrl}}/api/cart
Authorization: {{authToken}}
Content-Type: application/json

###

### Agregar primer servicio al carrito - Servicio de Diseño Web
# @name addWebDesignService
POST {{ baseUrl }}/api/cart/items
Authorization: {{authToken}}
Content-Type: application/json

{
  "serviceId": "550e8400-e29b-41d4-a716-446655440001",
  "quantity": 2
}

###

### Agregar segundo servicio al carrito - Servicio de Marketing Digital
# @name addMarketingService
POST {{ baseUrl }}/api/cart/items
Authorization: {{authToken}}
Content-Type: application/json

{
  "serviceId": "550e8400-e29b-41d4-a716-446655440002",
  "quantity": 1
}

###

### Agregar tercer servicio al carrito - Servicio de Consultoría
# @name addConsultingService
POST {{ baseUrl }}/api/cart/items
Authorization: {{authToken}}
Content-Type: application/json

{
  "serviceId": "550e8400-e29b-41d4-a716-446655440003",
  "quantity": 1
}

###

### Modificar cantidad del primer servicio (incrementar)
POST {{ baseUrl }}/api/cart/items
Authorization: {{authToken}}
Content-Type: application/json

{
  "serviceId": "550e8400-e29b-41d4-a716-446655440001",
  "quantity": 1
}

###

### Verificar contenido del carrito antes del pago
# @name cartBeforePayment1
GET {{baseUrl}}/api/cart
Authorization: {{authToken}}
Content-Type: application/json

###

### Procesar pago del carrito - Tarjeta de Crédito
# @name payment1
POST {{baseUrl}}/api/payment/simulate
Authorization: {{authToken}}
Content-Type: application/json

{
  "cartId": "{{cartBeforePayment1.response.body.id}}",
  "method": "CREDIT_CARD",
  "cardNumber": "4532123456789012",
  "cardHolderName": "Test User",
  "expiryMonth": "12",
  "expiryYear": "2025",
  "cvv": "123"
}

###

### Verificar historial de pagos después del primer pago
GET {{baseUrl}}/api/payment/history
Authorization: {{authToken}}
Content-Type: application/json

###

### Verificar estado del carrito después del pago (debe estar vacío o nuevo)
GET {{baseUrl}}/api/cart
Authorization: {{authToken}}
Content-Type: application/json

###

#########################################################################
# ESCENARIO 2: MODIFICAR CARRITO SIN PAGO Y DESPUÉS ELIMINARLO
#########################################################################

### Crear nuevo carrito con servicios
# @name addServiceScenario2_1
POST {{baseUrl}}/api/cart/items
Authorization: {{authToken}}
Content-Type: application/json

{
  "serviceId": "550e8400-e29b-41d4-a716-446655440004",
  "quantity": 1
}

###

### Agregar más servicios
# @name addServiceScenario2_2
POST {{baseUrl}}/api/cart/items
Authorization: {{authToken}}
Content-Type: application/json

{
  "serviceId": "550e8400-e29b-41d4-a716-446655440005",
  "quantity": 2
}

###

### Agregar tercer servicio
# @name addServiceScenario2_3
POST {{baseUrl}}/api/cart/items
Authorization: {{authToken}}
Content-Type: application/json

{
  "serviceId": "550e8400-e29b-41d4-a716-446655440006",
  "quantity": 1
}

###

### Verificar carrito actual con múltiples items
# @name cartScenario2
GET {{baseUrl}}/api/cart
Authorization: {{authToken}}
Content-Type: application/json

###

### Remover un item específico (NOTA: Reemplazar {itemId} con ID real del primer item)
DELETE {{baseUrl}}/api/cart/items/{itemId}
Authorization: {{authToken}}

###

### Verificar carrito después de remover item
GET {{baseUrl}}/api/cart
Authorization: {{authToken}}
Content-Type: application/json

###

### Abandonar carrito (vaciarlo completamente)
DELETE {{baseUrl}}/api/cart
Authorization: {{authToken}}

###

### Verificar carrito vacío
GET {{baseUrl}}/api/cart
Authorization: {{authToken}}
Content-Type: application/json

###

#########################################################################
# ESCENARIO 3: MÚLTIPLES INTENTOS DE PAGO CON DIFERENTES MÉTODOS
#########################################################################

### Crear carrito para pruebas de pago
# @name addServiceScenario3
POST {{baseUrl}}/api/cart/items
Authorization: {{authToken}}
Content-Type: application/json

{
  "serviceId": "550e8400-e29b-41d4-a716-446655440007",
  "quantity": 1
}

###

### Agregar segundo servicio
POST {{baseUrl}}/api/cart/items
Authorization: {{authToken}}
Content-Type: application/json

{
  "serviceId": "550e8400-e29b-41d4-a716-446655440008",
  "quantity": 2
}

###

### Verificar carrito antes de intentos de pago
# @name cartScenario3
GET {{baseUrl}}/api/cart
Authorization: {{authToken}}
Content-Type: application/json

###

### Primer intento de pago - Tarjeta de Crédito
# @name paymentAttempt1
POST {{baseUrl}}/api/payment/simulate
Authorization: {{authToken}}
Content-Type: application/json

{
  "cartId": "{{cartScenario3.response.body.id}}",
  "method": "CREDIT_CARD",
  "cardNumber": "4532123456789012",
  "cardHolderName": "Test User",
  "expiryMonth": "12",
  "expiryYear": "2025",
  "cvv": "123"
}

###

### Segundo intento de pago con PayPal (si el primero falló)
# @name paymentAttempt2
POST {{baseUrl}}/api/payment/simulate
Authorization: {{authToken}}
Content-Type: application/json

{
  "cartId": "{{cartScenario3.response.body.id}}",
  "method": "PAYPAL",
  "cardNumber": "4532123456789012",
  "cardHolderName": "Test User",
  "expiryMonth": "12",
  "expiryYear": "2025",
  "cvv": "123"
}

###

### Tercer intento con transferencia bancaria
# @name paymentAttempt3
POST {{baseUrl}}/api/payment/simulate
Authorization: {{authToken}}
Content-Type: application/json

{
  "cartId": "{{cartScenario3.response.body.id}}",
  "method": "BANK_TRANSFER",
  "cardNumber": "1234567890123456",
  "cardHolderName": "Test User",
  "expiryMonth": "12",
  "expiryYear": "2025",
  "cvv": "123"
}

###

### Verificar historial completo de pagos
GET {{baseUrl}}/api/payment/history
Authorization: {{authToken}}
Content-Type: application/json

###

### Obtener transacción específica por ID (reemplazar con ID real)
GET {{baseUrl}}/api/payment/transaction/{transactionId}
Authorization: {{authToken}}
Content-Type: application/json

###

#########################################################################
# ESCENARIO 4: PRUEBAS DE CONCURRENCIA (MÚLTIPLES CARRITOS)
#########################################################################

### Crear primer carrito
# @name concurrencyCart1
POST {{baseUrl}}/api/cart/items
Authorization: {{authToken}}
Content-Type: application/json

{
  "serviceId": "550e8400-e29b-41d4-a716-446655440009",
  "quantity": 1
}

###

### Verificar primer carrito
# @name firstCart
GET {{baseUrl}}/api/cart
Authorization: {{authToken}}
Content-Type: application/json

###

### Completar primer carrito con pago
# @name firstCartPayment
POST {{baseUrl}}/api/payment/simulate
Authorization: {{authToken}}
Content-Type: application/json

{
  "cartId": "{{firstCart.response.body.id}}",
  "method": "CREDIT_CARD",
  "cardNumber": "4532123456789012",
  "cardHolderName": "Test User Concurrency",
  "expiryMonth": "12",
  "expiryYear": "2025",
  "cvv": "123"
}

###

### Crear segundo carrito inmediatamente después del pago
# @name concurrencyCart2
POST {{baseUrl}}/api/cart/items
Authorization: {{authToken}}
Content-Type: application/json

{
  "serviceId": "550e8400-e29b-41d4-a716-446655440010",
  "quantity": 2
}

###

### Verificar que se creó un nuevo carrito activo
GET {{baseUrl}}/api/cart
Authorization: {{authToken}}
Content-Type: application/json

###

### Verificar historial de carritos
GET {{baseUrl}}/api/cart/history
Authorization: {{authToken}}
Content-Type: application/json

###

#########################################################################
# ESCENARIO 5: VALIDACIÓN DE SEGURIDAD Y ERRORES
#########################################################################

### Intentar acceso sin token (debe fallar con 401)
GET {{baseUrl}}/api/cart
Content-Type: application/json

###

### Intentar agregar item con cantidad inválida (debe fallar)
POST {{baseUrl}}/api/cart/items
Authorization: {{authToken}}
Content-Type: application/json

{
  "serviceId": "550e8400-e29b-41d4-a716-446655440001",
  "quantity": -1
}

###

### Intentar agregar item con serviceId inválido (debe fallar)
POST {{baseUrl}}/api/cart/items
Authorization: {{authToken}}
Content-Type: application/json

{
  "serviceId": "invalid-uuid-format",
  "quantity": 1
}

###

### Intentar pago con carrito inexistente (debe fallar)
POST {{baseUrl}}/api/payment/simulate
Authorization: {{authToken}}
Content-Type: application/json

{
  "cartId": "00000000-0000-0000-0000-000000000000",
  "method": "CREDIT_CARD",
  "cardNumber": "4532123456789012",
  "cardHolderName": "Test User",
  "expiryMonth": "12",
  "expiryYear": "2025",
  "cvv": "123"
}

###

### Intentar modificar item que no existe (debe fallar)
PUT {{baseUrl}}/api/cart/items/00000000-0000-0000-0000-000000000000
Authorization: {{authToken}}
Content-Type: application/json

{
  "quantity": 5
}

###

### Intentar eliminar item que no existe (debe fallar)
DELETE {{baseUrl}}/api/cart/items/00000000-0000-0000-0000-000000000000
Authorization: {{authToken}}

###

#########################################################################
# ESCENARIO 6: FLUJO COMPLETO DE E-COMMERCE
#########################################################################

### Limpiar carrito para comenzar flujo limpio
DELETE {{baseUrl}}/api/cart
Authorization: {{authToken}}

###

### Paso 1: Agregar servicios de diferentes categorías
POST {{baseUrl}}/api/cart/items
Authorization: {{authToken}}
Content-Type: application/json

{
  "serviceId": "550e8400-e29b-41d4-a716-446655440001",
  "quantity": 1
}

###

POST {{baseUrl}}/api/cart/items
Authorization: {{authToken}}
Content-Type: application/json

{
  "serviceId": "550e8400-e29b-41d4-a716-446655440002",
  "quantity": 2
}

###

POST {{baseUrl}}/api/cart/items
Authorization: {{authToken}}
Content-Type: application/json

{
  "serviceId": "550e8400-e29b-41d4-a716-446655440003",
  "quantity": 1
}

###

### Paso 2: Revisar carrito y modificar cantidades si es necesario
# @name finalEcommerceCart
GET {{baseUrl}}/api/cart
Authorization: {{authToken}}
Content-Type: application/json

###

### Paso 3: Proceder al checkout y pago
# @name finalEcommercePayment
POST {{baseUrl}}/api/payment/simulate
Authorization: {{authToken}}
Content-Type: application/json

{
  "cartId": "{{finalEcommerceCart.response.body.id}}",
  "method": "CREDIT_CARD",
  "cardNumber": "4532123456789012",
  "cardHolderName": "Test User Final",
  "expiryMonth": "12",
  "expiryYear": "2025",
  "cvv": "123"
}

###

### Paso 4: Verificar que el pago se procesó correctamente
GET {{baseUrl}}/api/payment/history
Authorization: {{authToken}}
Content-Type: application/json

###

### Paso 5: Verificar estado final del carrito
GET {{baseUrl}}/api/cart
Authorization: {{authToken}}
Content-Type: application/json

###

#########################################################################
# ESCENARIO 7: PRUEBAS ESPECÍFICAS PARA SERVICIOS DEL MARKETPLACE
# (Basado en ServiceResponseDTO del microservicio de marketplace)
#########################################################################

### Agregar servicios que simulan respuestas del marketplace
POST {{baseUrl}}/api/cart/items
Authorization: {{authToken}}
Content-Type: application/json

{
  "serviceId": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
  "quantity": 1
}

###

### Agregar servicio de tecnología
POST {{baseUrl}}/api/cart/items
Authorization: {{authToken}}
Content-Type: application/json

{
  "serviceId": "b2c3d4e5-f6g7-8901-bcde-f23456789012",
  "quantity": 2
}

###

### Agregar servicio de consultoría empresarial
POST {{baseUrl}}/api/cart/items
Authorization: {{authToken}}
Content-Type: application/json

{
  "serviceId": "c3d4e5f6-g7h8-9012-cdef-345678901234",
  "quantity": 1
}

###

### Verificar carrito con servicios del marketplace
# @name marketplaceCart
GET {{baseUrl}}/api/cart
Authorization: {{authToken}}
Content-Type: application/json

###

### Procesar pago de servicios del marketplace
POST {{baseUrl}}/api/payment/simulate
Authorization: {{authToken}}
Content-Type: application/json

{
  "cartId": "{{marketplaceCart.response.body.id}}",
  "method": "CREDIT_CARD",
  "cardNumber": "4532123456789012",
  "cardHolderName": "Marketplace Customer",
  "expiryMonth": "06",
  "expiryYear": "2026",
  "cvv": "456"
}

###

### Verificar pago de servicios del marketplace
GET {{baseUrl}}/api/payment/history
Authorization: {{authToken}}
Content-Type: application/json

###